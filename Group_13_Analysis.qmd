---
title: "Group_13_Analysis"
author: "Shuyin Chen, Xuran Wang, Yingying Zhuo, Yunfei Chen, Yuxuan Li "
number-sections: true
format: 
  html:
    embed-resources: true
    code-tools: true
  pdf: default
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  eval: true
  warning: false
  message: false
---
## Library

```{r}
#| label: libraries
library(ggplot2)
library(readr)
library(knitr)
library(stringr)
library(jtools)
library(GGally)
library(gridExtra)
library(factoextra)
```

## Wrangling of data

```{r}
data <- read.csv("dataset13.csv")

str(data)
summary(data)
#Remove missing values
data <- na.omit(data)
data <- data[data$altitude_mean_meters <= 8848, ]
str(data)
#Convert Qualityclass category variables to 0, 1: Good=1, Poor=0
data$Qualityclass_binary <- ifelse(data$Qualityclass == "Good", 1, 0)

```
## Data visualisation
Plotting box plots of aroma, flavour and acidity.
```{r}
#Boxplot
g1 <- ggplot(data = data, aes(x = Qualityclass, y = aroma, fill = Qualityclass)) +
  geom_boxplot() +
  labs(x = "Qualityclass", y = "Aroma")+ 
  theme(legend.position = "none")
g2 <- ggplot(data = data, aes(x = Qualityclass, y = flavor, fill = Qualityclass)) +
  geom_boxplot() +
  labs(x = "Qualityclass", y = "Flavor")+ 
  theme(legend.position = "none")
g3 <- ggplot(data = data, aes(x = Qualityclass, y = acidity, fill = Qualityclass)) +
  geom_boxplot() +
  labs(x = "Qualityclass", y = "Acidity")+ 
  theme(legend.position = "none")
grid.arrange(g1,g2,g3, ncol=3)
```

Plotting boxplots of Category_two_defects and Altitude_mean_meters.
```{r}
#Boxplot
ggplot(data = data, aes(x = Qualityclass, y = category_two_defects, fill = Qualityclass)) +
  geom_boxplot() +
  labs(x = "Qualityclass", y = "Category_two_defects")+ 
  theme(legend.position = "none")
ggplot(data = data, aes(x = Qualityclass, y = altitude_mean_meters, fill = Qualityclass)) +
  geom_boxplot() +
  labs(x = "Qualityclass", y = "Altitude_mean_meters")+ 
  theme(legend.position = "none")

```

Check correlations, distribution and print correlation coefficient
```{r}
#| eval: true
#scartterplot
par(mfrow = c(1, 1))

# Check correlations (as scatterplots), distribution and print correlation coefficient 
ggpairs(data[,2:6], 
        title = "Scatterplot matrix of coffee data", 
        mapping = aes(color = data$Qualityclass))

```

Create a correlation matrix as heatmap
```{r}
numeric_vars <- data[,2:6]
cor_matrix <- cor(numeric_vars)
print(cor_matrix)

cor_melt <- reshape2::melt(cor_matrix)
# 
ggplot(data = cor_melt, aes(x=Var1, y=Var2, fill=value)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, limit = c(-1,1), space = "Lab", 
                       name="Pearson\nCorrelation") +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  labs(x='', y='', title='Correlation Matrix of Coffee Data Variables')
```

Delete the outliers for the variables aroma, flavor and acidity.
```{r}
# delete Aroma == 0 
data <- data[data$aroma != 0, ]
data <- data[data$flavor != 0, ]
data <- data[data$acidity != 0, ]
```
Due to the significant multicollinearity between these three variables, a principal component analysis was performed to obtain the loading matrix and the scree plot.
```{r}
#pca for aroma flavor acidity
varable3 <- scale(data[, 2:4])
pca_result <- prcomp(varable3, center = TRUE, scale. = TRUE)
fviz_pca_ind(pca_result)

# Explain the variance
print(summary(pca_result))

# Principal component loading
print(pca_result$rotation)

variance <- pca_result$sdev^2
variance_percentage <- variance / sum(variance) * 100
plot(variance_percentage, type = "b", xlab = "Principal Component", ylab = "Percentage of Variance Explained", main = "Scree Plot")
text(variance_percentage, labels = paste("PC", 1:length(variance_percentage)), pos = 4)
```
According to the loading matrix, it can be seen that the first principal component explains 79.18% of these three variables, so the first principal component is selected as the variable of the model. It can be interpreted as the average of the three variables aroma, flavour, and acidity based on the score coefficient of the first principal component.
```{r}
## name pca1 as characteristics
pca1 <- as.data.frame(pca_result$x[, 1])
colnames(pca1) <- "characteristics"
head(pca1)
## Re-verify the correlation between the variables
data1 <- cbind(characteristics = pca1, data[, 5:9])
str(data1)
ggpairs(data1[,1:4], 
        title = "Scatterplot matrix of coffee data", 
        mapping = aes(color = data1$Qualityclass))
```
Based on the scatterplot matrix, it can be seen that there is no multicollinearity in the newly merged dataset and binary logistic regression can be performed.

$$characteristics_{\mbox{i}} =
0.56 \cdot aroma_{\mbox{i}} +
0.60 \cdot flavor_{\mbox{i}} - 0.57 \cdot acidity_{\mbox{i}}$$ 

## Creating model

```{r}
#formula
formula1 <- as.formula(paste("Qualityclass_binary ~", paste(names(data1)[1:4], collapse = "+")))

# Fit model for the Qualityclass_binary
logistic_model1 <- glm(formula1, data = data1, family = binomial)

summary(logistic_model1)
# Filter variables using stepwise regression
stepwise_model <- step(logistic_model1)

summary(stepwise_model)


```

```{r}
model_deviance <- deviance(stepwise_model)
null_deviance <- deviance(glm(Qualityclass_binary ~ 1, family = binomial, data = data1))
# Calculate R_square
R_square <- 1 - (model_deviance / null_deviance)
R_square
```

```{r}
# Output model results
model_summary <- summary(stepwise_model)

coefficients_table <- model_summary$coefficients

write.csv(coefficients_table, "logistic_model_summary.csv", row.names = TRUE)

```

According to our analysis, we can get the modelï¼š
$$ {Qualityclass\_binary}_i = \beta_0 + \beta_1 \cdot{characteristics}_i + \beta_2  \cdot{altitude\_mean\_meters}_i + \varepsilon_i $$

where

1. the intercept$\beta_0$ is the expected value of ${Qualityclass\_binary}_i$,when all independent variables are zero.

2. $\beta_1  \cdot {characteristics}_i$ is This term represents the effect of the $i_th$observation's characteristics on the quality class.

3. $\beta_2  \cdot {altitude\_mean\_meters}_i$ is the effect of the $i_th$ observation's average altitude (measured in meters) on the quality class.

4. $\varepsilon_i$ is unobserved factors that affect the quality class of the $i_th$ observation.